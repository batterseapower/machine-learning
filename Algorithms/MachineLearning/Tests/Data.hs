-- | Sample data sets, used to drive the machine learning library during development.
module Algorithms.MachineLearning.Tests.Data where

import Algorithms.MachineLearning.Framework
import Algorithms.MachineLearning.LinearAlgebra


-- | Dataset of noisy samples from a sine function:
--
-- @
--  input = U(0, 1)
--  target = sin(2Ï€x) + N(0, 0.09)
-- @
--
-- Source: http://research.microsoft.com/~cmbishop/PRML/webdatasets/curvefitting.txt
sinDataSet :: DataSet Double Double
sinDataSet = dataSetFromSampleList [
    (0.000000, 0.349486),
    (0.111111, 0.830839),
    (0.222222, 1.007332),
    (0.333333, 0.971507),
    (0.444444, 0.133066),
    (0.555556, 0.166823),
    (0.666667, -0.848307),
    (0.777778, -0.445686),
    (0.888889, -0.563567),
    (1.000000, 0.261502)
  ]

-- | Classes for use in demonstrating point classification
data Class = RedCross
           | BlueCircle
           deriving (Bounded, Enum, Eq)

-- This instance is only used to encode the Class within a DataSet: after that we
-- (typically) use a custom 1-of-K coding in LinearClassification. Does this point
-- to a refactoring not to store inputs in a matrix in DataSet?
instance Vectorable Class where
    toVector x = constant (fromIntegral $ fromEnum x) 1
    fromVector v = toEnum (round (v @> 0))

instance MetricSpace Class where
    distance x y = if x == y then 0 else 1

-- | Dataset of point classifications:, with Gaussian mixture configured as follows:
--
-- @
--  mix.priors = [0.5 0.25 0.25];
--  mix.centres = [0 -0.1; 1 1; 1 -1];
--  mix.covars(:,:,1) = [0.625 -0.2165; -0.2165 0.875];
--  mix.covars(:,:,2) = [0.2241 -0.1368; -0.1368 0.9759];
--  mix.covars(:,:,3) = [0.2375 0.1516; 0.1516 0.4125]; 
-- @
--
-- Source: http://research.microsoft.com/~cmbishop/prml/webdatasets/classification.txt
classificationDataSet :: DataSet (Double, Double) Class
classificationDataSet = dataSetFromSampleList [
    ((1.208985, 0.421448), RedCross),
    ((0.504542, -0.285730), BlueCircle),
    ((0.630568, 1.054712), RedCross),
    ((1.056364, 0.601873), RedCross),
    ((1.095326, -1.447579), BlueCircle),
    ((-0.210165, 0.000284), BlueCircle),
    ((-0.367151, -1.255189), BlueCircle),
    ((0.868013, -1.063465), RedCross),
    ((1.704441, -0.644833), RedCross),
    ((0.565619, -1.637858), BlueCircle),
    ((0.598389, -1.477808), RedCross),
    ((0.580927, -0.783898), BlueCircle),
    ((1.183283, -1.797936), RedCross),
    ((0.331843, -1.869486), RedCross),
    ((-0.051195, 0.989475), BlueCircle),
    ((2.427090, 0.173557), RedCross),
    ((1.603778, -0.030691), BlueCircle),
    ((1.286206, -1.079916), RedCross),
    ((-1.243951, 1.005355), BlueCircle),
    ((1.181748, 1.523744), RedCross),
    ((0.896222, 1.899568), RedCross),
    ((-0.366207, -0.664987), BlueCircle),
    ((-0.078800, 1.007368), BlueCircle),
    ((-1.351435, 1.766786), BlueCircle),
    ((-0.220423, -0.442405), BlueCircle),
    ((0.836253, -1.927526), RedCross),
    ((0.039899, -1.435842), RedCross),
    ((0.256755, 0.946722), RedCross),
    ((0.974836, -0.944967), RedCross),
    ((0.705256, -2.618644), RedCross),
    ((0.738188, -1.666242), RedCross),
    ((1.245931, -2.200826), RedCross),
    ((0.297604, 0.159463), BlueCircle),
    ((-2.210680, 1.195815), BlueCircle),
    ((-0.872624, -0.131252), BlueCircle),
    ((1.112762, -0.653777), RedCross),
    ((1.123989, -1.347470), RedCross),
    ((0.750833, 0.811870), RedCross),
    ((-0.183497, 1.416116), BlueCircle),
    ((0.287582, -1.342512), RedCross),
    ((1.092719, 1.380559), RedCross),
    ((0.719502, 1.594624), RedCross),
    ((-1.016254, 0.651607), BlueCircle),
    ((0.379677, 2.802498), RedCross),
    ((0.150675, 0.474679), BlueCircle),
    ((-0.116477, 0.437483), BlueCircle),
    ((1.122528, 0.698541), RedCross),
    ((0.953551, 1.088368), RedCross),
    ((-0.000228, 0.347187), BlueCircle),
    ((0.505024, 0.455407), BlueCircle),
    ((0.113753, 0.559572), BlueCircle),
    ((-0.677993, 0.322716), BlueCircle),
    ((1.114811, -0.735813), RedCross),
    ((0.344114, -1.770137), RedCross),
    ((0.684242, -0.636027), BlueCircle),
    ((-0.684629, -0.300568), BlueCircle),
    ((-0.362677, -0.669101), BlueCircle),
    ((0.604984, -1.558581), RedCross),
    ((0.514202, -0.225827), RedCross),
    ((0.227014, -1.579346), BlueCircle),
    ((1.044068, -1.491114), RedCross),
    ((0.314855, -2.535762), BlueCircle),
    ((1.187904, -1.367278), RedCross),
    ((0.517132, 1.375811), RedCross),
    ((1.244285, -0.764164), RedCross),
    ((-0.831841, 1.728708), BlueCircle),
    ((1.719616, -2.491282), BlueCircle),
    ((0.594216, 1.137571), BlueCircle),
    ((0.939919, -0.474988), RedCross),
    ((-0.918736, -0.748474), BlueCircle),
    ((0.913760, -1.194336), RedCross),
    ((0.893221, -1.569459), RedCross),
    ((0.653152, 0.510498), RedCross),
    ((0.766890, -1.577565), RedCross),
    ((0.868315, -1.966740), BlueCircle),
    ((0.874218, 0.514959), BlueCircle),
    ((-0.559543, 1.749552), BlueCircle),
    ((1.526669, -1.797734), BlueCircle),
    ((1.843439, -0.363161), RedCross),
    ((1.163746, 2.062245), RedCross),
    ((0.565749, -2.432301), BlueCircle),
    ((1.016715, 2.878822), RedCross),
    ((1.433979, -1.944960), BlueCircle),
    ((-0.510225, 0.295742), BlueCircle),
    ((-0.385261, 0.278145), BlueCircle),
    ((1.042889, -0.564351), RedCross),
    ((-0.607265, 1.885851), BlueCircle),
    ((-0.355286, -1.813131), BlueCircle),
    ((-0.790644, -0.790761), BlueCircle),
    ((1.372382, 0.879619), RedCross),
    ((1.133019, -0.300956), RedCross),
    ((1.395009, -1.006842), RedCross),
    ((0.887843, 0.222319), BlueCircle),
    ((1.484690, 0.095074), RedCross),
    ((1.268061, 1.832532), RedCross),
    ((0.124568, 0.910824), BlueCircle),
    ((1.061504, -0.768175), BlueCircle),
    ((0.298551, 2.573175), RedCross),
    ((0.241114, -0.613155), RedCross),
    ((-0.423781, -1.524901), BlueCircle),
    ((0.528691, -0.939526), RedCross),
    ((1.601252, 1.791658), RedCross),
    ((0.793609, 0.812783), BlueCircle),
    ((0.327097, 0.326998), RedCross),
    ((1.131868, -0.985696), BlueCircle),
    ((1.273154, 1.656441), RedCross),
    ((-0.816691, 0.961580), BlueCircle),
    ((0.669064, 1.162614), RedCross),
    ((-0.453759, -1.146883), BlueCircle),
    ((2.055105, 0.025811), RedCross),
    ((0.463119, -0.813294), BlueCircle),
    ((0.802392, -0.140807), BlueCircle),
    ((-0.730255, -0.145175), BlueCircle),
    ((0.569256, 0.567628), BlueCircle),
    ((0.486947, 1.130519), RedCross),
    ((1.793588, -1.426926), RedCross),
    ((1.178831, -0.581314), BlueCircle),
    ((0.480055, 1.257981), RedCross),
    ((0.683732, 0.190071), BlueCircle),
    ((-0.119082, -0.004020), BlueCircle),
    ((-1.251554, -0.176027), BlueCircle),
    ((1.094741, -1.099305), RedCross),
    ((-0.238250, -1.277484), BlueCircle),
    ((-0.661556, 1.327722), BlueCircle),
    ((1.442837, 1.241720), RedCross),
    ((1.202320, 0.489702), RedCross),
    ((0.932890, 0.296430), RedCross),
    ((0.665568, -1.314006), RedCross),
    ((-0.058993, 1.322294), BlueCircle),
    ((0.209525, -1.006357), RedCross),
    ((1.023340, 0.219375), RedCross),
    ((1.324444, 0.446567), BlueCircle),
    ((1.453910, -1.151325), RedCross),
    ((0.616303, 0.974796), RedCross),
    ((1.492010, -0.885984), RedCross),
    ((1.738658, 0.686807), BlueCircle),
    ((0.900582, -0.280724), RedCross),
    ((0.961914, -0.053991), BlueCircle),
    ((1.819706, -0.953273), BlueCircle),
    ((1.581289, -0.340552), RedCross),
    ((0.520837, -0.680639), BlueCircle),
    ((1.433771, -0.914798), RedCross),
    ((0.611594, -1.691685), RedCross),
    ((1.591513, -0.978986), BlueCircle),
    ((1.282094, 0.113769), RedCross),
    ((0.985715, 0.275551), RedCross),
    ((-1.805143, 2.628696), BlueCircle),
    ((1.473100, -0.241372), RedCross),
    ((-0.242212, -1.040151), BlueCircle),
    ((1.175525, -1.662026), RedCross),
    ((0.696040, 0.154387), RedCross),
    ((1.457713, 1.608681), RedCross),
    ((0.883215, 1.330538), RedCross),
    ((-0.681209, 0.622394), BlueCircle),
    ((-0.355082, 0.432941), BlueCircle),
    ((0.633011, -1.194431), RedCross),
    ((0.782723, 1.060008), BlueCircle),
    ((0.670180, -0.766999), BlueCircle),
    ((-0.047154, 0.698693), BlueCircle),
    ((0.287385, -1.097756), RedCross),
    ((0.069561, 1.632585), BlueCircle),
    ((1.013230, 1.111551), RedCross),
    ((0.639065, -0.697237), RedCross),
    ((1.174621, 2.240022), BlueCircle),
    ((1.322020, 0.040277), BlueCircle),
    ((0.019127, 0.105667), BlueCircle),
    ((0.584584, 1.101914), RedCross),
    ((1.157265, -0.665947), RedCross),
    ((1.565230, -0.840790), RedCross),
    ((1.759315, 0.963703), BlueCircle),
    ((1.687068, -1.086466), RedCross),
    ((0.578314, -0.340961), BlueCircle),
    ((0.118925, -1.487694), BlueCircle),
    ((0.471201, 0.330872), BlueCircle),
    ((-0.268209, -0.353477), RedCross),
    ((1.625390, -1.718798), RedCross),
    ((1.117791, 2.752549), RedCross),
    ((-0.194552, -0.752687), BlueCircle),
    ((0.769548, -2.066152), RedCross),
    ((0.186062, 0.022072), BlueCircle),
    ((1.771337, -0.393550), RedCross),
    ((-1.300597, 0.962803), BlueCircle),
    ((0.708730, -1.013371), RedCross),
    ((-0.624235, -0.892995), BlueCircle),
    ((0.377055, -1.296098), RedCross),
    ((0.804404, -0.856253), BlueCircle),
    ((1.359887, -0.974291), RedCross),
    ((-0.115505, 0.228439), BlueCircle),
    ((0.913645, -0.344936), BlueCircle),
    ((0.318875, -0.886290), BlueCircle),
    ((0.822157, 0.102548), RedCross),
    ((-0.281208, 1.302572), BlueCircle),
    ((0.044639, -1.107980), BlueCircle),
    ((-0.029205, -2.033973), RedCross),
    ((0.879914, -2.000582), BlueCircle),
    ((0.601936, -0.503923), RedCross),
    ((-0.490114, -0.841122), BlueCircle),
    ((1.847075, 2.362322), RedCross),
    ((-0.279703, 0.753196), BlueCircle),
    ((1.953357, -0.746632), RedCross)
  ]